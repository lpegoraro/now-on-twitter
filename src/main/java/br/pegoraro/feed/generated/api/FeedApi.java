/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.pegoraro.feed.generated.api;

import br.pegoraro.feed.generated.api.model.FeedBasketDto;
import br.pegoraro.feed.generated.api.model.FeedRequestDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-18T21:31:07.973792343-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "feed", description = "the feed API")
public interface FeedApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /feed
     * Consume feed gathering of information from all the feed created by the authenticated user, filters can be  applied to reduce scope of search. 
     *
     * @param label Identification of label, will error if duplicated for the same user. (optional)
     * @param filterTags Query tags, can be multiple, matching any. (optional)
     * @param debug Internal usage, only checks instead of consuming, will always return only one record, based on query params. (optional)
     * @return Display information gathered and reset counters. (status code 200)
     */
    @Operation(
        operationId = "consumeFeed",
        responses = {
            @ApiResponse(responseCode = "200", description = "Display information gathered and reset counters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeedBasketDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/feed",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FeedBasketDto>> _consumeFeed(
        @Parameter(name = "label", description = "Identification of label, will error if duplicated for the same user.") @Valid @RequestParam(value = "label", required = false) String label,
        @Parameter(name = "filter-tags", description = "Query tags, can be multiple, matching any.") @Valid @RequestParam(value = "", required = false) Object filterTags,
        @Parameter(name = "debug", description = "Internal usage, only checks instead of consuming, will always return only one record, based on query params.") @Valid @RequestParam(value = "debug", required = false) Boolean debug
    ) {
        return consumeFeed(label, filterTags, debug);
    }

    // Override this method
    default  ResponseEntity<List<FeedBasketDto>> consumeFeed(String label, Object filterTags, Boolean debug) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tweetCount\" : 0, \"searchHits\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /feed
     * Create new feed schedule, it will gather based on the cron the amount of data. The cron must be minute based,  and minute should not be over than 1h 
     *
     * @param feedRequestDto  (optional)
     * @return feed created (status code 201)
     */
    @Operation(
        operationId = "createFeed",
        responses = {
            @ApiResponse(responseCode = "201", description = "feed created")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/feed",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createFeed(
        @Parameter(name = "FeedRequestDto", description = "") @Valid @RequestBody(required = false) FeedRequestDto feedRequestDto
    ) {
        return createFeed(feedRequestDto);
    }

    // Override this method
    default  ResponseEntity<Void> createFeed(FeedRequestDto feedRequestDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
